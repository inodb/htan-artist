docker.enabled = true

manifest {
	name = 'adamjtaylor/htan-artist'
	author = 'Adam Taylor'
	homePage = 'https://github.com/adamjtaylor/htan-artist'
	description = 'Nextflow pipeline for rendering thumbnails and Minerva stories for the HTAN Data Portal'
	mainScript = 'main.nf'
	nextflowVersion = '>=21.09.0-edge'
}

params {
    max_memory    = '128.GB'
    max_cpus      = 16
    max_time      = '240.h'
}

profiles {  
    local {
        process.cpus = 4
        process.memory = 16.GB
	process.container = 'quay.io/adamjtaylor/htan-artist'
    }
    tower {
        process {
            container = 'quay.io/adamjtaylor/htan-artist'
            cpus   = { check_max( 8    * task.attempt, 'cpus'   ) }
            memory = { check_max( 16.GB * task.attempt, 'memory' ) }
            time   = { check_max( 24.h * task.attempt, 'time'   ) }
    
            // Process-specific resource requirements
            withLabel:process_low {
                cpus   = { check_max( 4     * task.attempt,  'cpus'   ) }
                memory = { check_max( 16.GB * task.attempt,  'memory' ) }
                time   = { check_max( 24.h  * task.attempt,  'time'   ) }
            }
            withLabel:process_medium {
                cpus   = { check_max( 8     * task.attempt, 'cpus'   ) }
                memory = { check_max( 32.GB * task.attempt, 'memory' ) }
                time   = { check_max( 48.h  * task.attempt, 'time'   ) }
            }
            withLabel:process_high {
                cpus   = { check_max( 16    * task.attempt, 'cpus'   ) }
                memory = { check_max( 64.GB * task.attempt, 'memory' ) }
                time   = { check_max( 96.h  * task.attempt, 'time'   ) }
            }
            withLabel:process_long {
                time   = { check_max( 192.h  * task.attempt, 'time'  ) }
            }
            withLabel:process_high_memory {
                memory = { check_max( 128.GB * task.attempt, 'memory' ) }
            }
       }
    
    }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
